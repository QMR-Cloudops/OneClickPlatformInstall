---
- hosts: localhost
  connection: local
  gather_facts: false


  vars:
    instances:
      - name: aws.standalone.apache
        group: "standalone_server"
        security_group: ["default", "aws.standalone.apache"]

    security_groups:
      - name: aws.standalone.apache
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress: []

  tasks:
    - name: Configure EC2 Security Groups.
      ec2_group:
        name: "{{ item.name }}"
        description: Example EC2 security group for Standalone Apache Web Server.
        region: "{{ item.region | default('us-east-1') }}" # North Virginia
        state: present
        rules: "{{ item.rules }}"
        rules_egress: "{{ item.rules_egress }}"
      with_items: security_groups
      environment: proxy_env

    - name: Provision EC2 instances.
      ec2:
        key_name: "{{ item.ssh_key | default('ansible_poc_key') }}"
        instance_tags:
          inventory_group: "{{ item.group | default('') }}"
          inventory_host: "{{ item.name | default('') }}"
        group: "{{ item.security_group | default('') }}"
        instance_type: "{{ item.type | default('t2.micro')}}" # Free Tier
        image: "{{ item.image | default('ami-00a11e68') }}" # RHEL-6.5_GA_HVM-20140929-x86_64-11-Hourly2-GP2
        region: "{{ item.region | default('us-east-1') }}" # North Virginia
        wait: yes
        wait_timeout: 300
        exact_count: 1
        count_tag:
          inventory_group: "{{ item.group | default('') }}"
          inventory_host: "{{ item.name | default('') }}"
      register: created_instances
      with_items: instances
      environment: proxy_env

    - name: Add EC2 instances to inventory groups.
      add_host:
        name: "{{ item.1.tagged_instances.0.public_ip }}"
        groups: "aws,{{ item.1.item.group }},{{ item.1.item.name }}"
        ansible_ssh_user: ec2-user
      when: item.1.instances is defined
      with_indexed_items: created_instances.results
      environment: proxy_env

# Run some general configuration on all AWS hosts.
- hosts: aws
  gather_facts: false

  tasks:
    - name: Wait for port 22 to become available.
      local_action: "wait_for port=22 host={{ inventory_hostname }}"
      ignore_errors: yes

    - name: Set selinux into 'permissive' mode.
      selinux: policy=targeted state=permissive
      sudo: yes
      environment: proxy_env
      ignore_errors: yes